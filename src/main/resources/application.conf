akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  //  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loggers = []

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  //  event-handlers = ["akka.event.slf4j.Slf4jLogger"] remove to stop logging
  event-handlers = []

  log-config-on-start = off

  log-dead-letters = 5

  log-dead-letters-during-shutdown = off

  log-sent-messages = off

  log-received-messages = off

  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

  http {
    server {
      parsing.max-content-length = 10 GB
      request-timeout = 4 seconds
    }
  }

  actor {
    serializers {
      kryo = "com.twitter.chill.akka.AkkaSerializer"
    }

    serialization-bindings {
      "java.io.Serializable" = kryo
    }

  }
}

arcite {
  cluster.name = "arcite-cluster-engine"
  home_name = "home"
  snapshot_name = "experiments_snapshot.json"
  file_service {
    snapshot_name = "file_service.json"
  }
  organization {
    name = "Idorsia Ltd."
    department = "Drug Discovery"
    package = "com.idorsia.research"
    experiment_types = [
      {name = "agilent_microarray", description = "Agilent Microarray", package = "agilent.microarray"}, //todo would be nice if we could move that to the workers
      {name = "nextSeq", description = "Illumina NextSeq", package = "mps.nextseq"},
      {name = "nanostring", description = "Nanostring experiments", package = "nanostring"},
      {name = "QPCR", description = "Real time PCR", package = "qpcr"},
      {name = "Proteomics", description = "Proteomics (general)", package = "proteomics"},
      {name = "misc", description = "Any kind of experiments", package = "misc"},
      {name = "catwalk", description = "Catwalk behavior experiments", package = "catwalk"}
    ]
  }
}

transform-worker {
  akka {
    remote {
      maximum-payload-bytes = 30000000 bytes
      netty.tcp {
        message-frame-size = 30000000b
        send-buffer-size = 30000000b
        receive-buffer-size = 30000000b
        maximum-frame-size = 30000000b
      }
    }
  }
}

transform-cluster {
  akka {
    remote {
      maximum-payload-bytes = 30000000 bytes
      netty.tcp {
        message-frame-size = 30000000b
        send-buffer-size = 30000000b
        receive-buffer-size = 30000000b
        maximum-frame-size = 30000000b
      }
    }
  }
}

//experiments-manager {
//  akka {
//    remote {
//      maximum-payload-bytes = 30000000 bytes
//      netty.tcp {
//        message-frame-size = 30000000b
//        send-buffer-size = 30000000b
//        receive-buffer-size = 30000000b
//        maximum-frame-size = 30000000b
//      }
//    }
//  }
//}
