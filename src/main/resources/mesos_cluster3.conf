include "application" // to be started with -Dconfig.resource= <fileName.conf>

arcite {
  home = /arcite/${arcite.home_name}
  snapshot = ${arcite.home}/${arcite.snapshot_name}
  logs = ${arcite.home}/logs
  file_service {
    snapshot = ${arcite.home}/${arcite.file_service.snapshot_name}
  }

  mounts = [
    {name = "microarray", description = "agilent microarray scanner", path = "/arcite/raw_data/microarrays"},
    {name = "nextSeq", description = "illumina NextSeq", path = "/arcite/raw_data/mps/nextseq"},
    {name = "catwalk", description = "catwalk raw data ", path = "/arcite/raw_data/catwalk/"}
    {name = "meta", description = "meta information, like ref. genomes ", path = "/arcite/meta/"}
  ]
}

http {// to which host and port the http rest api should bind to.
  host = "0.0.0.0"
  port = 8084
}

akka { // the akka rest-api actor system
  remote.netty.tcp {
    hostname = "127.0.0.1"      # external (logical) hostname
    port = 4444                   # external (logical) port
  }

  uri = "akka.tcp://rest-api@127.0.0.1:4444"

  actor {
    serialize-messages = on
    serialize-creators = on
  }
}

transform_worker {
  akka {

    actor.provider = "akka.cluster.ClusterActorRefProvider"

    remote.netty.tcp.hostname = "127.0.0.1"
    remote.netty.tcp.port = 4445

  }

  contact-points = [
    "akka.tcp://ArcTransfActClustSys@127.0.0.1:4551",
    "akka.tcp://ArcTransfActClustSys@127.0.0.1:4552"]
}

transform_cluster {
  akka {

    actor.provider = "akka.cluster.ClusterActorRefProvider"

    remote.netty.tcp.port = 0
    remote.netty.tcp.hostname = "127.0.0.1"

    remote.netty.tcp.bind-hostname = 127.0.0.1 # internal (bind) hostname


    cluster {
      seed-nodes = [
        "akka.tcp://ArcTransfActClustSys@127.0.0.1:4551",
        "akka.tcp://ArcTransfActClustSys@127.0.0.1:4552"]

      auto-down-unreachable-after = 10s
    }

    extensions = ["akka.cluster.client.ClusterClientReceptionist"]

    # Sigar native library extract location during tests.
    # Note: use per-jvm-instance folder when running multiple jvm on one host.
    akka.cluster.metrics.native-library-extract-folder = ${user.dir}/target/native

    # Disable legacy metrics in akka-cluster.
    akka.cluster.metrics.enabled = off

    # Enable metrics extension in akka-cluster-metrics.
    akka.extensions = ["akka.cluster.metrics.ClusterMetricsExtension"]
  }

  backends {
    ports = ["4551", "4552", "4553", "4554"]
  }

  frontends {
    numberOfports = 4
  }
}

experiments-manager {
  include "application" // todo only include the akka part for here

  akka {
    actor {
      provider = "akka.remote.RemoteActorRefProvider"
    }

    //    remote {
    enabled-transports = ["akka.remote.netty.tcp", "akka.remote.netty.NettyRemoteTransport"]

    remote {
      log-remote-lifecycle-events = off

      netty.tcp {
        hostname = "127.0.0.1"
        port = 3333
      }
    }

    uri = "akka.tcp://experiments-actor-system@127.0.0.1:3333"
  }
}

tree-of-transforms-actor-system {
  akka {
    actor {
      provider = "akka.remote.RemoteActorRefProvider"

    }

    enabled-transports = ["akka.remote.netty.tcp", "akka.remote.netty.NettyRemoteTransport"]

    remote {
      log-remote-lifecycle-events = on

      netty.tcp {
        hostname = "127.0.0.1"
        port = 3344
      }
    }

    uri = "akka.tcp://tree-of-transforms-actor-system@127.0.0.1:3344"
  }
}

meta-info-actor-system {
  akka {
    actor {
      provider = "akka.remote.RemoteActorRefProvider"

    }

    enabled-transports = ["akka.remote.netty.tcp", "akka.remote.netty.NettyRemoteTransport"]

    remote {
      log-remote-lifecycle-events = on

      netty.tcp {
        hostname = "127.0.0.1"
        port = 3345
      }
    }

    uri = "akka.tcp://meta-info-actor-system@127.0.0.1:3345"
  }
}
