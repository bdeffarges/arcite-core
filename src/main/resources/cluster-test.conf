include "application" // to be started with -Dconfig.resource= <fileName.conf>

arcite {
  cluster.name = "arcite-cluster-engine-test"
  home = /arcite
  snapshot = ${arcite.home}/${arcite.snapshot_name}
  logs = ${arcite.home}/logs
  file_service {
    snapshot = ${arcite.home}/${arcite.file_service.snapshot_name}
  }

  mounts = [
    {name = "microarray", description = "agilent microarray scanner", path = "/raw/microarrays"},
    {name = "nextSeq", description = "illumina NextSeq", path = "/raw/mps/nextseq"},
    {name = "catwalk", description = "catwalk raw data ", path = "/raw/catwalk/"}
    {name = "meta", description = "meta information, like ref. genomes ", path = "/raw/meta/"}
  ]
}

http {
  host = 0.0.0.0
  port = 8080
}

akka {

  loglevel = DEBUG

  discovery {
    method = marathon-api

    marathon-api {
      class = akka.discovery.marathon.MarathonApiSimpleServiceDiscovery

      # URL for getting list of apps from Marathon. Verified on OSS DC/OS 1.8, 1.9
      app-api-url = "http://marathon.mesos:8080/v2/apps"

      # The name of the akka management port - this cannot have underscores or dashes (env var name)
      app-port-name = "akkamgmthttp"

      # Used to find other apps running by Marathon. This will be passed as the label query string parameter
      # to the apps-api-url defined above.
      # `%s` will be replaced with the configured effective name, which defaults to the actor system name
      app-label-query = "ACTOR_SYSTEM_NAME==%s"
    }
  }

  actor {
    provider = cluster
  }

  remote {
    netty.tcp {
      hostname = ${HOST}
      port = 2551
      port = ${?PORT_2551}

      bind-hostname = 0.0.0.0
      bind-port = 2551
    }
  }

  management {
    http {
      # The hostname where the HTTP Server for Http Cluster Management will be started.
      # This defines the interface to use.
      # InetAddress.getLocalHost.getHostAddress is used not overriden or empty
      hostname = ${HOST}
      port = 19999
      port = ${?PORT_19999}

      bind-hostname = 0.0.0.0
      bind-port = 19999
    }

    cluster {
      bootstrap {

        shutdown-after-unsuccessful-join-seed-nodes = 40s

        # Configuration for the first phase of bootstraping, during which contact points are discovered
        # using the configured service discovery mechanism.
        contact-point-discovery {

          # Marathon API discovery uses effective-name when it's defined.
          #
          # Marathon API dicsovery uses this value to substitute to the query `app-label-query`
          #
          # It should match with application LABEL value declared in Marathon description.
          #
          effective-name = "arcite-cluster-engine-test"
        }
      }
    }
  }

  extensions = ["akka.cluster.client.ClusterClientReceptionist"]

}

# Configuration related to the app is in its own namespace
distributed-workers {
  # Each worker pings the master with this interval
  # to let it know that it is alive
  worker-registration-interval = 20s
  # If a worker hasn't gotten in touch in this long
  # it is removed from the set of workers
  consider-worker-dead-after = 60s

  # If a workload hasn't finished in this long it
  # is considered failed and is retried
  work-timeout = 12h
}
