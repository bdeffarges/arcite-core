//env="smicro2"
//env = "ubuntu_home"
//env= "bamboo"
env = "ubuntu_work"

arcite-core {
  akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "DEBUG"
    stdout-loglevel = "DEBUG"
    event-handlers = ["akka.event.slf4j.Slf4jLogger"]
    //  log-config-on-start = "on"

    actor {
      provider = "akka.remote.RemoteActorRefProvider"
    }

    //    remote {
    enabled-transports = ["akka.remote.netty.tcp", "akka.remote.netty.NettyRemoteTransport"]

    netty.tcp {
      //        //      hostname = "CHALUW-DEV01"      # external (logical) hostname
      hostname = "127.0.0.1"      # external (logical) hostname
      //        port = 2552                   # external (logical) port
      //
      //        bind-hostname = "0.0.0.0" # internal (bind) hostname
      //        bind-port = 2552              # internal (bind) port
    }
  }
}

play-ground {
  akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "DEBUG"
    stdout-loglevel = "DEBUG"
    event-handlers = ["akka.event.slf4j.Slf4jLogger"]
    //  log-config-on-start = "on"

    actor {
      provider = "akka.remote.RemoteActorRefProvider"
    }

    //    remote {
    enabled-transports = ["akka.remote.netty.tcp", "akka.remote.netty.NettyRemoteTransport"]

    netty.tcp {
      //        //      hostname = "CHALUW-DEV01"      # external (logical) hostname
      hostname = "127.0.0.1"      # external (logical) hostname
      //        port = 2552                   # external (logical) port
      //
      //        bind-hostname = "0.0.0.0" # internal (bind) hostname
      //        bind-port = 2552              # internal (bind) port
    }
  }
}


transform-cluster-ctrl {
  akka {
    actor {
      provider = "akka.cluster.ClusterActorRefProvider"
    }
    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "127.0.0.1"
        port = 0
      }
    }
    cluster {
      roles = ["transformers-ctrl"]
      seed-nodes = ["akka.tcp://arcite-transformers-cluster@127.0.0.1:60001"]

      auto-down-unreachable-after = 10s
    }
  }
}

transform-cluster-example {
  akka {
    actor {
      provider = "akka.cluster.ClusterActorRefProvider"
    }
    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "127.0.0.1"
        port = 0
      }
    }
    cluster {
      roles = ["transf-services-text"]
      seed-nodes = ["akka.tcp://arcite-transformers-cluster@127.0.0.1:60001"]

      auto-down-unreachable-after = 10s
    }
  }
}

experiments-actor-system {
  akka {
    actor {
      provider = "akka.remote.RemoteActorRefProvider"
    }

    //    remote {
    enabled-transports = ["akka.remote.netty.tcp", "akka.remote.netty.NettyRemoteTransport"]

    remote {
      log-remote-lifecycle-events = on

      netty.tcp {
        hostname = "127.0.0.1"
        port = 3333
      }
    }

    uri = "akka.tcp://experiments-actor-system@127.0.0.1:3333"
  }
}

# Disable legacy metrics in akka-cluster.
akka.cluster.metrics.enabled = off

# Enable metrics extension in akka-cluster-metrics.
akka.extensions = ["akka.cluster.metrics.ClusterMetricsExtension"]

# Sigar native library extract location during tests.
# Note: use per-jvm-instance folder when running multiple jvm on one host.
akka.cluster.metrics.native-library-extract-folder = ${user.dir}/target/native

akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

}